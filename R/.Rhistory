if(is.null(r)) r = runif(1)
point = r^(1/p) * point/sqrt(sum(point^2))
}
generate = function(n, p){
matrix(t(replicate(n, generate.point(p))), ncol = p)
}
distances = c()
for(p in ps)
distances = rbind(distances, data.frame(distance = distance(generate(n, p)), dimension = p))
distances = distances %>% mutate(dimension = factor(dimension))
plt1 = ggplot()+
geom_histogram(data = distances,
mapping = aes(x = distance, fill = dimension, frame = dimension),
position = "identity", alpha = 0.7, breaks = seq(0, 1, 0.01))+
geom_vline(data = distances %>% group_by(dimension) %>% summarise(distance = median(distance)),
mapping = aes(xintercept = distance, color = dimension, frame = dimension),
linetype = "dashed")+
theme(legend.position = "none")
ggplotly(plt1)
generate.2d.projections = function(distances){
distribution =  distances %>% hist(breaks = seq(0, 1, 0.01), plot = FALSE)
n = length(distribution$counts)
points = c()
for(i in 1:n){
rs = runif(distribution$counts[i], distribution$breaks[i:(i+1)])
for(r in rs)
points = rbind(points, generate.point(2, r))
}
points
}
points.proj = c()
for(p in ps){
distances.sub = distances %>% filter(dimension == p) %>% select(distance) %>% pull()
points.proj = rbind(points.proj, data.frame(generate.2d.projections(distances.sub), dimension = factor(p, levels = ps)))
}
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")
ggplotly(plt2)
generate.2d.projections = function(distances){
distribution =  distances %>% hist(breaks = seq(0, 1, 0.01), plot = FALSE)
n = length(distribution$counts)
points = c()
for(i in 1:n){
rs = runif(distribution$counts[i], distribution$breaks[i:(i+1)])
for(r in rs)
points = rbind(points, generate.point(2, r))
}
points
}
points.proj = c()
for(p in ps){
distances.sub = distances %>% filter(dimension == p) %>% select(distance) %>% pull()
points.proj = rbind(points.proj, data.frame(generate.2d.projections(distances.sub), dimension = factor(p, levels = ps)))
}
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")
ggplotly(plt2)
generate.2d.projections = function(distances){
distribution =  distances %>% hist(breaks = seq(0, 1, 0.01), plot = FALSE)
n = length(distribution$counts)
points = c()
for(i in 1:n){
rs = runif(distribution$counts[i], distribution$breaks[i:(i+1)])
for(r in rs)
points = rbind(points, generate.point(2, r))
}
points
}
points.proj = c()
for(p in ps){
distances.sub = distances %>% filter(dimension == p) %>% select(distance) %>% pull()
points.proj = rbind(points.proj, data.frame(generate.2d.projections(distances.sub), dimension = factor(p, levels = ps)))
}
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")
ggplotly(plt2)
library(ggforce)
install.packages("ggforce")
library(ggforce)
?geom_circle
geom_circle(mapping = aes(x0 = 0, y0 = 0, r = 1)
plt2 = ggplot()+
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")+
geom_circle(mapping = aes(x0 = 0, y0 = 0, r = 1))
ggplotly(plt2)
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")+
geom_circle(mapping = aes(x0 = 0, y0 = 0, r = 1), color = "black")
ggplotly(plt2)
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
geom_circle(mapping = aes(x0 = 0, y0 = 0, r = 1, frame = dimension), color = "black")+
theme(legend.position = "none")
ggplotly(plt2)
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
geom_circle(aes(x0 = 0, y0 = 0, r = 1, frame = dimension), color = "black")+
theme(legend.position = "none")
ggplotly(plt2)
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
geom_circle(aes(x0 = 0, y0 = 0, r = 1), color = "black")+
theme(legend.position = "none")
ggplotly(plt2)
plt2 = ggplot(aes(frame = dimension))+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension))+
geom_circle(aes(x0 = 0, y0 = 0, r = 1), color = "black")+
theme(legend.position = "none")
plt2 = ggplot(data = points.proj,
aes(x = X1, y = X2, color = dimension, frame = dimension))+
geom_point()+
geom_circle(aes(x0 = 0, y0 = 0, r = 1), color = "black")+
theme(legend.position = "none")
ggplotly(plt2)
plt2 = ggplot()+
geom_point(data = points.proj,
aes(x = X1, y = X2, color = dimension, frame = dimension))+
geom_circle(data.frame(x0 = 0, y0 = 0, r = 1, dimension = ps),
aes(x0 = x0, y0 = y0, r = r, frame = dimension), color = "black")+
theme(legend.position = "none")
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
geom_circle(data.frame(x0 = 0, y0 = 0, r = 1, dimension = ps),
mapping = aes(x0 = x0, y0 = y0, r = r, frame = dimension), color = "black")+
theme(legend.position = "none")
ggplotly(plt2)
ps
data.frame(x0 = 0, y0 = 0, r = 1, dimension = ps)
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")
ggplotly(plt2)
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")+
xlab(NA)+
ylab(NA)
ggplotly(plt2)
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")+
xlab(NULL)+
ylab(NULL)
ggplotly(plt2)
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
geom_circle(data = data_circle, aes(x0 = x0, y0 = y0, r = r))
data_circle <- data.frame(x0 = 0,
y0 = 0,
r = 1)
data_circle = data.frame(x0 = 0,
y0 = 0,
r = 1)
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
geom_circle(data = data_circle, aes(x0 = x0, y0 = y0, r = r))+
theme(legend.position = "none")+
xlab(NULL)+
ylab(NULL)
ggplotly(plt2)
data_circle = data.frame(x0 = 0,
y0 = 0,
r = 1,
dimension = ps)
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
geom_circle(data = data_circle, aes(x0 = x0, y0 = y0, r = r, frame = dimension))+
theme(legend.position = "none")+
xlab(NULL)+
ylab(NULL)
ggplotly(plt2)
data_circle = data.frame(x0 = 0,
y0 = 0,
r = 1,
dimension = factor(ps))
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
geom_circle(data = data_circle, aes(x0 = x0, y0 = y0, r = r, frame = dimension))+
theme(legend.position = "none")+
xlab(NULL)+
ylab(NULL)
ggplotly(plt2)
data_circle = data.frame(x0 = 0,
y0 = 0,
r = 1,
dimension = factor(ps))
data_circle
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
geom_circle(data = data_circle, mapping = aes(x0 = x0, y0 = y0, r = r, frame = dimension))+
theme(legend.position = "none")+
xlab(NULL)+
ylab(NULL)
ggplotly(plt2)
data_circle
data_circle$dimension
data.circle = data.frame(X1 = cos(seq(0, 2*pi, 0.01)), X2 = sin(seq(0, 2*pi, 0.01)))
data.circle
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")+
geom_polygon(data.circle, aes(x = X1, y = X2))+
xlab(NULL)+
ylab(NULL)
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")+
geom_polygon(data.circle, mapping = aes(x = X1, y = X2))+
xlab(NULL)+
ylab(NULL)
ggplotly(plt2)
data.circle = data.frame(X1 = cos(seq(0, 2*pi, 0.01)), X2 = sin(seq(0, 2*pi, 0.01)))
plt2 = ggplot()+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")+
geom_polygon(data.circle,
mapping = aes(x = X1, y = X2),
alpha = 0, color = "black")+
xlab(NULL)+
ylab(NULL)
ggplotly(plt2)
data.circle = data.frame(X1 = cos(seq(0, 2*pi, 0.01)), X2 = sin(seq(0, 2*pi, 0.01)), dimension = ps)
data.circle = data.frame(X1 = cos(seq(0, 2*pi, 0.01)), X2 = sin(seq(0, 2*pi, 0.01)))
plt2 = ggplot()+
geom_polygon(data.circle,
mapping = aes(x = X1, y = X2),
alpha = 0, color = "black")+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")+
xlab(NULL)+
ylab(NULL)
ggplotly(plt2)
data.circle = data.frame(t = seq(0, 2*pi, 0.01)) %>%
mutate(dimension = ps)
length(seq(0, 2*pi, 0.01))
rep(c(1,2)5)
rep(c(1,2),5)
dimension = rep(ts, rep(legnth(ts), legnth(ts)))
data.circle = data.frame(X1 = rep(sin(ts), length(ts)), X2 = rep(cos(ts), length(ts)),
dimension = rep(ts, rep(legnth(ts), legnth(ts))))
ts = seq(0, 2*pi, 0.01)
data.circle = data.frame(X1 = rep(sin(ts), length(ts)), X2 = rep(cos(ts), length(ts)),
dimension = rep(ts, rep(legnth(ts), legnth(ts))))
data.circle = data.frame(X1 = rep(sin(ts), length(ts)), X2 = rep(cos(ts), length(ts)),
dimension = rep(ts, rep(length(ts), length(ts))))
data.circle
data.circle = data.frame(X1 = rep(sin(ts), length(ps)), X2 = rep(cos(ts), length(ps)),
dimension = rep(ps, rep(length(ts), length(ps))))
plt2 = ggplot()+
geom_polygon(data.circle,
mapping = aes(x = X1, y = X2),
alpha = 0, color = "black")+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")+
xlab(NULL)+
ylab(NULL)
ggplotly(plt2)
plt2 = ggplot()+
geom_polygon(data.circle,
mapping = aes(x = X1, y = X2, frame = dimension),
alpha = 0, color = "black")+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")+
xlab(NULL)+
ylab(NULL)
ggplotly(plt2)
plt2 = ggplot()+
geom_polygon(data.circle,
mapping = aes(x = X1, y = X2, frame = dimension),
alpha = 0.1, color = "black")+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")+
xlab(NULL)+
ylab(NULL)
ggplotly(plt2)
plt1 = ggplot()+
geom_histogram(data = distances,
mapping = aes(x = distance, fill = dimension, frame = dimension),
position = "identity", alpha = 0.7, breaks = seq(0, 1, 0.01))+
geom_vline(data = distances %>% group_by(dimension) %>% summarise(distance = median(distance)),
mapping = aes(xintercept = distance, color = dimension, frame = dimension),
linetype = "dashed")+
theme(legend.position = "none")+
theme_minimal()
ggplotly(plt1)
plt2 = ggplot()+
geom_polygon(data.circle,
mapping = aes(x = X1, y = X2, frame = dimension),
alpha = 0.1, color = "black")+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")+
xlab(NULL)+
ylab(NULL)+
theme_minimal()
ggplotly(plt2)
plt2 = ggplot()+
geom_polygon(data.circle,
mapping = aes(x = X1, y = X2, frame = dimension),
alpha = 0.2, color = "black")+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")+
xlab(NULL)+
ylab(NULL)+
theme_minimal()
ggplotly(plt2)
plt2 = ggplot()+
geom_polygon(data.circle,
mapping = aes(x = X1, y = X2, frame = dimension),
alpha = 0.2)+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")+
xlab(NULL)+
ylab(NULL)+
theme_minimal()
ggplotly(plt2)
ts = seq(0, 2*pi, 0.01)
data.circle = data.frame(X1 = rep(sin(ts), length(ps)), X2 = rep(cos(ts), length(ps)),
dimension = rep(ps, rep(length(ts), length(ps)))) %>%
mutate(dimension = factor(dimension, levels = ps))
plt2 = ggplot()+
geom_polygon(data.circle,
mapping = aes(x = X1, y = X2, frame = dimension),
alpha = 0.2)+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme(legend.position = "none")+
xlab(NULL)+
ylab(NULL)+
theme_minimal()
ggplotly(plt2)
plt2 = ggplot()+
geom_polygon(data.circle,
mapping = aes(x = X1, y = X2, frame = dimension),
alpha = 0.2)+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme_minimal()+
theme(legend.position = "none", xlab = NULL, ylab = NULL)
ggplotly(plt2)
plt2 = ggplot()+
geom_polygon(data.circle,
mapping = aes(x = X1, y = X2, frame = dimension),
alpha = 0.2)+
geom_point(data = points.proj,
mapping = aes(x = X1, y = X2, color = dimension, frame = dimension))+
theme_minimal()+
theme(legend.position = "none", axis.title.x = element_blank())
ggplotly(plt2)
ggplotly(plt1, tooltip = c("x", "count"))
for(p in ps)
distances = rbind(distances, data.frame(distance = distance(generate(n, p)), dimension = p))
distances = distances %>% mutate(dimension = factor(dimension))
plt1 = ggplot()+
geom_histogram(data = distances,
mapping = aes(x = distance, fill = dimension, frame = dimension),
position = "identity", alpha = 0.7, breaks = seq(0, 1, 0.01))+
geom_vline(data = distances %>% group_by(dimension) %>% summarise(distance = median(distance)),
mapping = aes(xintercept = distance, color = dimension, frame = dimension),
linetype = "dashed")+
theme_minimal()+
theme(legend.position = "none")
for(p in ps)
ggplotly(plt1, tooltip = c("x", "count"))
Score <- c(43,
15,
50,
38.5,
52.5,
45.5,
51.5,
47.5,
45,
52,
42,
51,
43,
49.5,
47,
)
Score <- c(43,
15,
50,
38.5,
52.5,
45.5,
51.5,
47.5,
45,
52,
42,
51,
43,
49.5,
47
)
hist(Score, col = "blue", breaks = 10)
scores <- c(0.457673364,
0.421398995,
0.92555011,
0.798086253,
0.958691497,
0.868604509,
0.949316344,
0.414420485,
0.882511149,
0.811315854,
0.950809851,
0.780120853,
0.917135506,
0.796042637,
0.930929919,
0.878345136
)
hist(scores)
hist(scores, breaks = 10)
A = matrix(rnorm(10), 5, 2)
A
qr.Q(qr(A))
A = qr.Q(qr(A))
A
A = qr.Q(qr(A))
A
qr.R(qr(A))
solve(qr.R(qr(A)))
deparse(substitute(v1))
a = list()
a$a
load("C:/Users/pc/Dropbox/ChromatinPC/R library/PoisMS - Copy/data/IMR90_25kb_chr20.rda")
View(IMR90_25kb_chr20)
setwd("C:/Users/pc/Dropbox/ChromatinPC/R library/PoisMS - Copy/R")
IMR90 = list()
load("C:/Users/pc/Dropbox/ChromatinPC/R library/PoisMS - Copy/data/IMR90_25kb_chr21.rda")
load("C:/Users/pc/Dropbox/ChromatinPC/R library/PoisMS - Copy/data/IMR90_50kb_chr20.rda")
load("C:/Users/pc/Dropbox/ChromatinPC/R library/PoisMS - Copy/data/IMR90_50kb_chr21.rda")
load("C:/Users/pc/Dropbox/ChromatinPC/R library/PoisMS - Copy/data/IMR90_100kb_chr20.rda")
load("C:/Users/pc/Dropbox/ChromatinPC/R library/PoisMS - Copy/data/IMR90_100kb_chr21.rda")
IMR90$chr20 = list()
IMR90$chr20$res100kb = list(IMR90_100kb_chr20)
IMR[["chr20"]][["res100kb"]]
IMR90[["chr20"]][["res100kb"]]
IMR90$chr20$res50kb = list(IMR90_50kb_chr20)
IMR90$chr20$res25kb = list(IMR90_25kb_chr20)
IMR90$chr21$res25kb = list(IMR90_25kb_chr21)
IMR90$chr21$res50kb = list(IMR90_50kb_chr21)
IMR90$chr21$res100kb = list(IMR90_100kb_chr21)
bulk_cell = IMR90
saveRDS(bulk_cell)
saveRDS(bulk_cell, "bulk_cell.rda")
bulk_cell
names(bulk_cell)
names(bulk_cell[["chr20"]])
a = readRDS(bulk_cell)
a = readRDS("bulk_cell.rda")
get_cell = function(num){
df = as.matrix(read.csv(paste('Data/sparse_contact_cell', num, '.csv', sep = ''), header = FALSE))
n = df[1,1]
C = matrix(0, n, n)
C[df[-1,1:2]] = df[-1,3]
C = C + t(C)
diag(C) = diag(C)/2
return(C)
}
get_cell(1)
dim(get_cell(1))
single_cell = list()
single_cell$chr1 = list()
single_cell = list()
single_cell$chr1_res100kb = list()
for(i in 1:8) single_cell$chr1_res100kb[[i]] = get_cell(i)
single_cell$chr1_res100kb$1
single_cell$chr1_res100kb[[1]]
single_cell$chr1_res100kb[[2]]
single_cell$chr1_res100kb[[3]]
single_cell$chr1_res100kb[[4]]
single_chr1_res100kb_1
for(i in 1:8) writeRDS(get_cell(i), paste0("single_chr1_res100kb_", i, ".rda")
)
for(i in 1:8) saveRDS(get_cell(i), paste0("single_chr1_res100kb_", i, ".rda"))
